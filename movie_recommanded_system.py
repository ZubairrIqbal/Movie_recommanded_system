# -*- coding: utf-8 -*-
"""movie_recommanded_system.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oEvQGJopE0EfHAiwJK4YzQithFdbQsb_
"""

# !unzip '/content/archive (4).zip'

import numpy as np
import pandas as pd

movies = pd.read_csv('/content/tmdb_5000_movies.csv')
credits = pd.read_csv('/content/tmdb_5000_credits.csv')

movies.head(1)

credits.head(1)

movies_merged = movies.merge(credits,on='title')

movies_merged.shape

movies_merged.head(1)

#genre
# id
# keywords
# title
# overview
# cast
# crew

movies = movies_merged[['movie_id','title','overview','genres','keywords','cast','crew']]
movies

movies.isnull().sum()

movies.dropna(inplace=True)

movies.duplicated().sum()

movies.head(1)

movies.iloc[0].genres

import ast
def convert(obj):
  L = []
  for i in ast.literal_eval(obj):
    L.append(i['name'])
  return L

movies['genres'] = movies['genres'].apply(convert)

movies.head(1)

movies['keywords'] = movies['keywords'].apply(convert)

movies['cast'] = movies['cast'].apply(convert3)

import ast
def convert3(obj):
  L = []
  counter = 0
  for i in ast.literal_eval(obj):
    if counter != 3:
      L.append(i['name'])
      counter+=1
    else:
      break
  return L

def fetch_director(obj):
  L = []
  for i in ast.literal_eval(obj):
    if i['job'] == 'Director':
      L.append(i['name'])
      break
  return L

movies['crew'] = movies['crew'].apply(fetch_director)

movies['overview'] = movies['overview'].apply(lambda x:x.split())

movies.head(1)

movies['genres'] = movies['genres'].apply(lambda x:[i.replace(" ","") for i in x])
movies['keywords'] = movies['keywords'].apply(lambda x:[i.replace(" ","") for i in x])
movies['cast'] = movies['cast'].apply(lambda x:[i.replace(" ","") for i in x])
movies['crew'] = movies['crew'].apply(lambda x:[i.replace(" ","") for i in x])

movies.head(1)

movies['tags'] = movies['overview'] + movies['genres'] + movies['keywords'] + movies['cast'] + movies['crew']

movies.head(1)

new_df = movies[['movie_id','title','tags']]

new_df

new_df['tags'] = new_df['tags'].apply(lambda x:" ".join(x))

new_df['tags'][0]

new_df['tags'] = new_df['tags'].apply(lambda x:x.lower())

# !pip install nltk

from nltk import PorterStemmer
ps = PorterStemmer()

def stem(text):
  y = []
  for i in text.split():
    y.append(ps.stem(i))
  return " " .join(y)

new_df['tags'] = new_df['tags'].apply(stem)

new_df.head(1)

"""#**Text Vectorization**"""

from sklearn.feature_extraction.text import CountVectorizer
cv = CountVectorizer(max_features=5000,stop_words='english')

vectors = cv.fit_transform(new_df['tags']).toarray()

vectors[0]

cv.get_feature_names_out()

"""#**Cousine Similarity**"""

from sklearn.metrics.pairwise import cosine_similarity
similarity = cosine_similarity(vectors)

sorted(list(enumerate(similarity[0])),reverse=True,key=lambda x:x[1])[1:6]

similarity[0]

"""#**Main Function**"""

def recommend(movie):
  movie_index = new_df[new_df['title'] == movie].index[0]
  distance = similarity[movie_index]
  movies_list = sorted(list(enumerate(distance)),reverse=True,key=lambda x:x[1])[1:6]
  for i in movies_list:
    print(new_df.iloc[i[0]].title)

recommend('Avatar')

"""#**Using of pickel library to show movi list in streamlit**"""

import pickle
pickle.dump(new_df.to_dict(),open('movies_dict.pkl','wb'))

pickle.dump(similarity,open('similarity.pkl','wb'))